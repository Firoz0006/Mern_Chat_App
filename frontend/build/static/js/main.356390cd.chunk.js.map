{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","console","log","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","as","color","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.356390cd.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      console.log(email, password);\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\" as=\"b\" color=\"green\">\n          Real Chat Group Talk\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      // console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Real Chat Group Talk\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}